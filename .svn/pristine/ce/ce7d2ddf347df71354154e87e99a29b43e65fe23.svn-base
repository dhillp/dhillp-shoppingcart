/*
 * Pamaldeep Singh Dhillon
 * ItemOrder.java
 * 
 * TCSS 305 - Autumn 2015
 * Assignment 2 - ShoppingCart
 */

package model;

import java.math.BigDecimal;
import java.util.Objects;
/**
 * ItemOrder object that stores information about a purchase order for a
 * particular item.
 * 
 * @author Pamaldeep Dhillon
 * @version 16 October 2015
 */
public final class ItemOrder {
    /** Item in the ItemOrder.*/
    private final Item myItem;
    /** Quantity of the Item in the ItemOrder.*/
    private final int myQuantity;
    
    /**
     * Constructor that creates an item order for the given quantity of the given Item.
     * 
     * @param theItem Item in the order.
     * @param theQuantity Quantity of the item in the order.
     * @throws IllegalArgumentException if quantity parameter is negative.
     * @throws NullPointerException if item parameter is null.
     */
    public ItemOrder(final Item theItem, final int theQuantity) {
        if (theQuantity < 0) {
            throw new IllegalArgumentException("Quantity must be a positive value!");
        }
        myItem = (Item) Objects.requireNonNull(theItem);
        myQuantity = theQuantity;
    }

    /**
     * Returns the cost for this item order as a BigDecimal.
     * 
     * @return Cost of this item order.
     */
    public BigDecimal calculateOrderTotal() {
        return myItem.calculateItemTotal(myQuantity);
    }

    /**
     * Returns a reference to the Item in this ItemOrder.
     * 
     * @return The Item in the order.
     */
    public Item getItem() {
        return myItem;
    }
    
    /**
     * Returns the quantity for this ItemOrder.
     * 
     * @return Quantity of items.
     */
    public int getQuantity() {
        return myQuantity;
    }

    /**
     * Returns a String representation of this ItemOrder.
     * 
     * {@inheritDoc} 
     */
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(": ");
        sb.append(myItem);
        sb.append(", ");
        sb.append(myQuantity);
        sb.append(" for $");
        sb.append(calculateOrderTotal());
        return sb.toString();
    }

}
