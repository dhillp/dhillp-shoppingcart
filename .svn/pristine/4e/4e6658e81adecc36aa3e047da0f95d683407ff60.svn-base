/**
 * 
 */
package tests;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import model.Item;
import org.junit.Before;
import org.junit.Test;

/**
 * @author Pamaldeep
 * @version 16 October 2015
 */
public class ItemTest {
    /** */
    private Item myItem;
    /** */
    private Item myItem2;

    /**
     * @throws java.lang.Exception
     */
    @Before
    public void setUp() {
        myItem = new Item("Test", new BigDecimal("1.00"), 2, new BigDecimal("1.50"));
        myItem2 = new Item("Other", new BigDecimal("1.50"));
    }

    /**
     * Test method for {@link model.Item#hashCode()}.
     */
    @Test
    public void testHashCode() {
        final Item item2 = new Item("Test", new BigDecimal("1.00"), 2, new BigDecimal("1.50"));
        final Item item3 = new Item("Other", new BigDecimal("1.50"));
        assertEquals("hashCode() fails to produce identical vaules!", myItem.hashCode(),
                     item2.hashCode());
        assertEquals("hashCode() fails to produce identical vaules!", myItem2.hashCode(),
                item3.hashCode());
    }

//    /**
//     * Test method for {@link model.Item#Item(java.lang.String, java.math.BigDecimal)}.
//     */
//    @Test
//    public void testItemStringBigDecimal() {
//        fail("Not yet implemented");
//    }

//    /**
//     * Test method for {@link model.Item#Item(java.lang.String, java.math.BigDecimal,
//     * int, java.math.BigDecimal)}.
//     */
//    @Test
//    public void testItemStringBigDecimalIntBigDecimal() {
//        fail("Not yet implemented");
//    }

    /**
     * Test method for {@link model.Item#calculateItemTotal(int)}.
     */
    @Test
    public void testCalculateItemTotal() {
        assertEquals("Calculated total not right for bulk price!", new BigDecimal("4.00"),
                     myItem.calculateItemTotal(5));
        assertEquals("Calculated total not right for bulk but not enough quantity!",
                     new BigDecimal("1.00"), myItem.calculateItemTotal(1));
        assertEquals("Calculated total not right!", new BigDecimal("1.50"),
                     myItem2.calculateItemTotal(1));
    }
    
    /**
     * Test method for calculateItemTotal() when parameter is negative.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testCalculateItemTotalNegativeQuantity() {
        myItem.calculateItemTotal(-1);
    }

    /**
     * Test method for {@link model.Item#isBulk()}.
     */
    @Test
    public void testIsBulk() {
        assertEquals(true, myItem.isBulk());
    }

    /**
     * Test method for {@link model.Item#toString()}.
     */
    @Test
    public void testToString() {
        assertEquals("toString() incorrect!", "Test, $1.00 (2 for $1.50)", myItem.toString());
        assertEquals("toString() incorrect!", "Other, $1.50", myItem2.toString());
    }

    /**
     * Test method for {@link model.Item#equals(java.lang.Object)}.
     */
    @Test
    public void testEqualsObject() {
        assertEquals("equals() fails a test of the reflexive property.", myItem, myItem);
        assertEquals("equals() fails a test of the reflexive property,", myItem2, myItem2);
        assertNotEquals("equals() fails to return false when passed a null parameter",
                myItem, null);
        assertNotEquals("equals() fails to return false when passed the wrong parameter type",
                myItem, new Object());
        final Item item2 = new Item("Test", new BigDecimal("1.00"), 2, new BigDecimal("1.50"));
        assertEquals("equals() fails a test of the symmetric property.",
                myItem, item2);
        assertEquals("equals() fails a test of the symmetric property.",
                item2, myItem);
        final Item item3 = new Item("Other", new BigDecimal("1.50"));
        assertEquals("equals() fails a test of the symmetric property.",
                myItem2, item3);
        assertEquals("equals() fails a test of the symmetric property.",
                item3, myItem2);
        assertFalse("equals() fails to return false when item name does not match.",
                myItem.equals(new Item("Test2", new BigDecimal("1.00"), 2,
                                       new BigDecimal("1.50"))));
        assertFalse("equals() fails to return false when item name does not match.",
                myItem2.equals(new Item("Other2", new BigDecimal("1.50"))));
        assertFalse("equals() fails to return false when item price does not match.",
                myItem.equals(new Item("Test", new BigDecimal("2.00"), 2,
                                       new BigDecimal("1.50"))));
        assertFalse("equals() fails to return false when item price does not match.",
                myItem2.equals(new Item("Other", new BigDecimal("1.00"))));
        assertFalse("equals() fails to return false when bulk quantity does not match.",
                myItem.equals(new Item("Test", new BigDecimal("1.00"), 3,
                                       new BigDecimal("1.50"))));
        assertFalse("equals() fails to return false when bulk price does not match.",
                myItem.equals(new Item("Test", new BigDecimal("1.00"), 2,
                                       new BigDecimal("1.75"))));
    }

}
